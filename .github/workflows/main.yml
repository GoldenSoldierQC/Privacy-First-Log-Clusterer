# Repo Starter Pack — fichiers prêts à ajouter au repo

J'ai préparé un **starter pack** prêt à copier/coller dans ton repo. Il contient :

* `Dockerfile` — image légère pour exécuter le script (build/run expliqué)
* `.github/workflows/report.yml` — workflow GitHub Actions qui génère `report.html` (artefact)
* `.gitignore` — propre et adapté au projet
* `action.yml` — wrapper minimal pour publier le script comme GitHub Action
* Instructions `git` pour créer la branche, commit et ouvrir PR

> Tu trouveras tout le contenu ci‑dessous. Copie chaque bloc dans le fichier correspondant et commit.

---

## `Dockerfile`

```dockerfile
FROM python:3.11-slim

LABEL org.opencontainers.image.title="privacy-first-log-clusterer"
LABEL org.opencontainers.image.license="Source-Available (see LICENSE)"

WORKDIR /app

# Copier le code
COPY . /app

# Pas de dépendances externes requises. Si tu en ajoutes, ajoute requirements.txt et uncomment:
# RUN pip install --no-cache-dir -r requirements.txt

ENTRYPOINT ["python", "log_clusterer.py"]
CMD ["--input", "demo", "--out", "report.html"]
```

---

## `.github/workflows/report.yml`

```yaml
name: Generate Log Report

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run demo & generate report
        run: |
          python -m pip install --upgrade pip
          python log_clusterer.py --input demo --out report.html --watch False

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: log-cluster-report
          path: report.html
```

> Remarque: si tu veux que le workflow publie le report sur `gh-pages`, je peux ajouter une étape `peaceiris/actions-gh-pages@v4` pour déployer automatiquement.

---

## `action.yml` (optionnel — transforme ton script en GitHub Action)

```yaml
name: "Log Clusterer"
description: "Run the privacy-first log clusterer (SimHash) and produce an HTML report."
inputs:
  input:
    description: 'Path to log file or directory (default: demo)'
    required: false
    default: 'demo'
  out:
    description: 'Output HTML file'
    required: false
    default: 'report.html'
  threshold:
    description: 'Hamming threshold (int)'
    required: false
    default: '6'
  sanitize:
    description: 'Mask PII in output (true/false)'
    required: false
    default: 'false'
runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - --input
    - ${{ inputs.input }}
    - --out
    - ${{ inputs.out }}
    - --threshold
    - ${{ inputs.threshold }}
    - --sanitize
    - ${{ inputs.sanitize }}
```

---

## `.gitignore`

```
__pycache__/
*.py[cod]
*.log
sample_demo.log
report.html
out/
.vscode/
.DS_Store
.env
```

---

## Rappels licence

* Tu as déjà un draft `LICENSE` (Source-Available / BSL-like) dans le repo. **Remplace** `YEAR`, `OWNER` et `<CONVERSION_DATE>` par tes valeurs (ex: `2025 YourName`, `2028-10-30`).
* Conseil pratique: active `--sanitize` dans la CI si tu publies le report publiquement.

---

## Commandes `git` recommandées (création branche + commit)

```bash
git checkout -b ci-docker-setup
# créer les fichiers (Dockerfile, .github/workflows/report.yml, .gitignore, action.yml)
git add Dockerfile .github .gitignore action.yml LICENSE README.md
git commit -m "chore(ci): add Dockerfile, GitHub Actions workflow, action metadata, and .gitignore"
git push origin ci-docker-setup
# puis créer PR sur GitHub et merger quand prêt
```

---

## Et après — checklist courte de déploiement & visibilité

1. Remplacer les placeholders dans `LICENSE` (YEAR/OWNER/DATE).
2. Lancer le workflow manuellement (Actions → Generate Log Report → Run workflow).
3. Télécharger l'artefact `log-cluster-report` pour vérifier `report.html`.
4. (Optionnel) Activer GitHub Pages / ou ajouter job GH Action pour déployer `report.html` sur `gh-pages`.
5. Préparer assets Product Hunt / HN (je peux générer visuels + GIF).

---

Si tu veux, je peux maintenant :

* Générer le GIF demo (je fournis le script pour le faire localement),
* Ajouter l'étape `gh-pages` dans le workflow pour déployer automatiquement le report,
* Préparer et formater la page Product Hunt + images prêtes.

Dis-moi quelle(s) action(s) tu veux que je fasse **ensuite** et je m'en occupe (je peux générer les fichiers README / GH Pages workflow / images dans le canvas).
